package FordFulkerson;

import java.util.Random;

public class Principal {

    static final int tamanho = 1000;     

    public static void main(String[] args) throws java.lang.Exception 
    {
    	//Inicializa a classe do algoritmo
    	FordFulkerson ff = new FordFulkerson();
    	
    	//Cria a matriz de números aleatórios
    	Random rand = new Random();
    	int[][] grafo = new int[tamanho][tamanho];
    	
    	for(int i=0;i<tamanho;i++)
    	    for(int j=0;j<tamanho;j++)
    	       grafo[i][j]=rand.nextInt(100);  	
       
    	//Imprime o grafo inicial
        System.out.println("Grafo:");        
        for (int i = 0; i < tamanho; i++) {
            for (int j = 0; j < tamanho; j++) {
                System.out.print("\t" + grafo[i][j]);
            }
            System.out.print("\n");
        }            
        
        //Executa o algoritmo e marca o tempo de execução
        long startTime = System.nanoTime();
        System.out.println("\n\nFluxo Máximo: " + ff.Executar(grafo, 0, tamanho - 1, tamanho));
        long stopTime = System.nanoTime();
        System.out.println("Tempo de execução: " + (stopTime - startTime));
    }
}

package FordFulkerson;

public class FordFulkerson 
{
	//Executa o algoritmo
	public int Executar(int grafo[][], int inicio, int fim, int tamanho) 
    {    	   
		//Cria o grafo auxiliar
        int grafoAuxiliar[][] = new int[tamanho][tamanho];

        //Inicializa com uma cópia do grafo original
        for (int i = 0; i < tamanho; i++) 
            for (int j = 0; j < tamanho; j++) 
            	grafoAuxiliar[i][j] = grafo[i][j];

        //Cria o vetor de vizinhos, inicializa a variável de fluxo máximo e instância um objeto da classe Busca
        int vizinhos[] = new int[tamanho];
        int fluxoMaximo = 0;        
        Busca busca = new Busca();

        //Loop principal, percorre os vizinhos e incrementa o fluxo máximo enquanto houverem caminhos na rede
        while (busca.Largura(grafoAuxiliar, inicio, fim, vizinhos, tamanho)) 
        {
            int fluxo = Integer.MAX_VALUE;
            int indiceReverso = vizinhos.length - 1;
            
            for(int i = indiceReverso; i > 0; i = vizinhos[i]) {
                int aux = vizinhos[i];
                fluxo = Math.min(fluxo, grafoAuxiliar[aux][i]);
            }
            
            for(int i = indiceReverso; i > 0; i = vizinhos[i]) 
            {
            	int aux = vizinhos[i];
                grafoAuxiliar[aux][i] -= fluxo;
                grafoAuxiliar[i][aux] += fluxo;
            }

            fluxoMaximo += fluxo;
        }

        //Retorna o valor final
        return fluxoMaximo;
    }
}

package FordFulkerson;

import java.util.LinkedList;

public class Busca {
	
	//Algoritmo de busca em largura
	public boolean Largura(int grafoAuxiliar[][], int origem, int destino, int vizinhos[], int tamanho)
    {
        boolean visitados[] = new boolean[tamanho];
        
        //Inicializa a lista de visitados
        for (int i = 0; i < tamanho; ++i) {
        	visitados[i] = false;
        }

        //Adiciona a origem na lista
        LinkedList<Integer> lista = new LinkedList<>();
        lista.add(origem);
        visitados[origem] = true;
        vizinhos[origem] = -1;

        //Loop que procura o caminho
        while (!lista.isEmpty()) 
        {
        	//Retorna o primeiro elemento da lista
            int element = lista.poll();
            
            //Itera com base no tamanho da lista, e verifica se o elemento já não está na lista dos visitados e se o elemento tem valor válido
            //Caso positivo o elemento é adicionado na lista e seu pai é atualizado, assim como seu status de visitado. 
            for (int i = 0; i < tamanho; i++) 
            {
                if (visitados[i] == false && grafoAuxiliar[element][i] > 0) 
                {
                	lista.add(i);
                	vizinhos[i] = element;
                    visitados[i] = true;
                }
            }
        }
        
        //Encerra a busca
        return (visitados[destino] == true);
    }
}
